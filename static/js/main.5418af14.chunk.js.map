{"version":3,"sources":["components/redux/reducerMain.js","components/preloader/Preloader.jsx","components/Main.jsx","App.js","reportWebVitals.js","components/redux/reducerCombainer.js","index.js"],"names":["initialState","state","users","usersSize","pageSize","currentPage","showEmploy","Preloader","class","MainContainer","id","FN","LN","Em","Ph","btn","setCurrentPage","e","props","arr","len","Math","ceil","i","console","log","push","getUsers","changeId","setState","sortID","sort","prev","next","sortId","reverse","changeFN","sortFN","map","item","firstName","filter","length","arr1","j","changeLN","sortLN","lastName","changeEm","sortEm","email","changePh","sortPh","phone","add","$","slideToggle","addInTable","employ","val","description","address","zip","streetAddress","city","addEmploy","addUser","changeForm","find","finded","match","findUser","axios","get","then","getState","data","pageCount","this","pages","className","onClick","onChange","type","minLength","disabled","placeholder","p","ket","streetAddres","React","Component","Main","connect","reducerMain","user","count","show","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","form","formReducer","Store","createStore","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5418af14.chunk.js","sourcesContent":["\n\n//база стэйта\nconst initialState={\n    state:[],\n    users:[],\n    usersSize: 1,\n    pageSize: 50,\n    currentPage: 1,\n    showEmploy: ''\n\n}\n\n//думаю тут все понятно по названию актион тупе\n\nexport const reducerMain = (state=initialState, action)=>{\n    switch(action.type){\n\n        case 'GET_STATE':{\n            return {...state, state: action.state //.sort((prev,next) =>prev.id - next.id ) \n            }\n        }\n        case 'GET_USERS':{\n            return {...state, users: action.state }\n        }\n        case \"USERS_SIZE\":{\n            return {...state, usersSize: action.count}\n        }\n        case 'PAGE_SIZE':{\n            return {...state, pageSize: action.count}\n        }\n        case 'SET_CURRENT_PAGE':{\n            return {...state, currentPage: action.count}\n        }\n        case 'SORT_ID':{\n            return {...state, users: action.sort}\n        }\n        case 'SORT_FN':{\n            return {...state, users: action.sort}\n        }\n        case 'SORT_LN':{\n            return {...state, users: action.sort}\n        }\n        case 'SORT_Em':{\n            return {...state, users: action.sort}\n        }\n        case 'SORT_Ph':{\n            return {...state, users: action.sort}\n        }\n        case 'SHOW_EMPLOY':{\n            return {...state, showEmploy: [action.show]}\n        }\n        case 'ADD_EMPLOY':{\n            return {...state, state: [ action.add, ...state.state]}\n        }\n        case 'ADD_USER':{\n            return {...state, users: [ action.user, ...state.users]}\n        }\n        case 'FIND_USER':{\n            return {...state, users: action.user}\n        }\n        \n        \n\n        \n        default:\n            return state\n    }\n}\n\nexport const getState = (state)=>({type: 'GET_STATE', state})\nexport const usersSize = (count) => ({type: 'USERS_SIZE', count})\nexport const pageSize = (count) => ({type: 'PAGE_SIZE', count})\nexport const setCurrentPage = (count) => ({type: 'SET_CURRENT_PAGE', count})\nexport const getUsers = (state)=>({type: 'GET_USERS', state})\nexport const sortId = (sort) =>({type: 'SORT_ID', sort})\nexport const sortFN = (sort) =>({type: 'SORT_FN', sort})\nexport const sortLN = (sort) =>({type: 'SORT_LN', sort})\nexport const sortEm = (sort) =>({type: 'SORT_Em', sort})\nexport const sortPh = (sort) =>({type: 'SORT_Ph', sort})\nexport const showEmploy = (show) =>({type: 'SHOW_EMPLOY', show})\nexport const addEmploy = (add) =>({type: 'ADD_EMPLOY', add})\nexport const addUser = (user) =>({type: 'ADD_USER', user})\nexport const findUser = (user) =>({type: 'FIND_USER', user})\n\n","import React from 'react'\nimport './Preloader.css'\n\nexport const Preloader = () => {\n    return(\n        <div >\n            <div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n        </div>\n    )\n}","import axios from 'axios'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport {findUser, addUser, getState, pageSize, usersSize, setCurrentPage, getUsers, sortId, sortFN, sortLN, sortEm, sortPh, showEmploy, addEmploy } from './redux/reducerMain'\nimport './Main.css'\nimport { Preloader } from './preloader/Preloader'\nimport $ from 'jquery'\n\n\nclass MainContainer extends React.Component {\n    //стэйт для отслеживания стрелок сортировки\n    state = {\n        id: true,\n        FN: true,\n        LN: true,\n        Em: true,\n        Ph: true,\n        btn: true\n    }\n    //Получаем данные с сервера в виде JSON\n    componentDidMount() {\n        axios.get(`http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`)\n            .then(state => {\n                //добавляю в Стэйт\n                this.props.getState(state.data)\n                //Получаю общее количество Юзеров для пагинации\n                this.props.usersSize(state.data.length)\n                //Это можно не писать, но если измениться количество юзеров на странице, можно это использовать\n                this.props.pageSize(50)\n                //вывожу по 50 пользователей на страницу\n                let arr = []\n                for (let i = 0; i < 50; i++) {\n                    arr.push(state.data[i])\n                }\n                this.props.getUsers(arr)\n            })\n\n\n\n\n    }\n    //устанавливаю текущую страницу, чтобы отобразить пользователей\n    setCurrentPage = (e) => {\n        this.props.setCurrentPage(e)\n        let users = this.props.state.state\n\n        let arr = []\n        //какая страница показана, таких пользователей вывожу\n        let len = e * 50\n       //если на странице меньше 50 пользователей, вывожу остаток\n        if(e=== Math.ceil(this.props.state.usersSize / this.props.state.pageSize)){\n            \n            for (let i = len - 50; i < len- 50 + this.props.state.usersSize%50 ; i++) {\n                console.log(users[i])\n                arr.push(users[i])\n            }\n            \n        }\n        //если на странице 50 пользователей, срабатыввает этот код\n        if(e!== Math.ceil(this.props.state.usersSize / this.props.state.pageSize)){\n        for (let i = len - 50; i < len; i++) {\n            arr.push(users[i])\n        }}\n        this.props.getUsers(arr)\n    }\n    //сортировка ИД для сортировки\n    changeId = () => {\n        //стрелочки вниз вверх для отображения\n        this.setState({ id: false })\n        if (!this.state.id) {\n            this.setState({ id: true })\n        }\n        //если тру стрелка, сортируем. если фолс то реверс отсортированного массива\n        if (this.state.id) {\n\n            let sortID = this.props.state.users.sort((prev, next) => prev.id - next.id)\n            this.props.sortId(sortID)\n        } else {\n            let sortID = this.props.state.users.sort((prev, next) => prev.id - next.id)\n            this.props.sortId(sortID.reverse())\n        }\n\n    }\n\n    //сортировка по имени, также как с ИД\n    changeFN = () => {\n        this.setState({ FN: false })\n        if (!this.state.FN) {\n            this.setState({ FN: true })\n        }\n\n\n\n        if (this.state.FN) {\n            let sortFN = this.props.state.users.map(item => item.firstName).sort()\n            let arr = []\n            for (let i = 0; i < sortFN.length; i++) {\n                arr.push(this.props.state.users.filter(item => item.firstName === sortFN[i]))\n            }\n            let arr1 = []\n            for (let i = 0; i < arr.length; i++) {\n                for (let j = 0; j < arr[i].length; j++) {\n                    arr1.push(arr[i][j])\n                }\n            }\n            this.props.sortFN(arr1)\n        } else {\n            let sortFN = this.props.state.users.reverse()\n            this.props.sortFN(sortFN)\n        }\n    }\n\n    //сортировка по фамилии, также как с ИД\n    changeLN = () => {\n        this.setState({ LN: false })\n        if (!this.state.LN) {\n            this.setState({ LN: true })\n        }\n        if (this.state.LN) {\n\n            let sortLN = this.props.state.users.map(item => item.lastName).sort()\n\n            let arr = []\n            for (let i = 0; i < sortLN.length; i++) {\n                arr.push(this.props.state.users.filter(item => item.lastName === sortLN[i]))\n            }\n            let arr1 = []\n            for (let i = 0; i < arr.length; i++) {\n                for (let j = 0; j < arr[i].length; j++) {\n                    arr1.push(arr[i][j])\n                }\n\n            }\n\n            this.props.sortLN(arr1)\n        } else {\n            let sortLN = this.props.state.users.reverse()\n            this.props.sortLN(sortLN)\n        }\n    }\n    //сортировка по емаил, также как с ИД\n    changeEm = () => {\n        this.setState({ Em: false })\n        if (!this.state.Em) {\n            this.setState({ Em: true })\n        }\n        if (this.state.Em) {\n\n            let sortEm = this.props.state.users.map(item => item.email).sort()\n\n            let arr = []\n            for (let i = 0; i < sortEm.length; i++) {\n                arr.push(this.props.state.users.filter(item => item.email === sortEm[i]))\n            }\n            let arr1 = []\n            for (let i = 0; i < arr.length; i++) {\n                for (let j = 0; j < arr[i].length; j++) {\n                    arr1.push(arr[i][j])\n                }\n\n            }\n\n            this.props.sortEm(arr1)\n        } else {\n            let sortEm = this.props.state.users.reverse()\n            this.props.sortEm(sortEm)\n        }\n\n    }\n    //сортировка по телефону, также как с ИД . Код дублируется, можно зарифакторить все, но показываю подробно\n    changePh = () => {\n        this.setState({ Ph: false })\n        if (!this.state.Ph) {\n            this.setState({ Ph: true })\n        }\n        if (this.state.Ph) {\n\n            let sortPh = this.props.state.users.map(item => item.phone).sort()\n\n            let arr = []\n            for (let i = 0; i < sortPh.length; i++) {\n                arr.push(this.props.state.users.filter(item => item.phone === sortPh[i]))\n            }\n            let arr1 = []\n            for (let i = 0; i < arr.length; i++) {\n                for (let j = 0; j < arr[i].length; j++) {\n                    arr1.push(arr[i][j])\n                }\n\n            }\n\n            this.props.sortPh(arr1)\n        } else {\n            let sortPh = this.props.state.users.reverse()\n            this.props.sortPh(sortPh)\n        }\n    }\n    //показать внизу таблицы выброного пользователя\n    showEmploy = (item) => {\n        \n        this.props.showEmploy(item)\n    }\n    //показать окно для ввода нового пользователя\n    add = () => {\n        $('#showTable').slideToggle(500)\n    }\n    \n    \n    //добавить нового пользователя \n    addInTable = (e)=>{\n        //объект юзера, нужно еще добавить адресс, в задании не было такого условия\n        let employ = {\n            id: this.props.state.state.length+1,\n            firstName: $('#FirstNameT').val(),\n            lastName: $('#LastNameT').val(),\n            email: $('#EmailT').val(),\n            phone: $('#PhoneT').val(),\n            //в задании не было, но пришлось захарткодить, так как валится ошибка при нажатии добавленного пользователя\n            description: 'Вот так вот',\n            address:{\n                zip: '1234',\n                streetAddress: 'Moscow',\n                state: 'MSK',\n                city: 'MOSCOW'\n\n            }\n        }\n        //добавляем доп. юзера по количеству\n        this.props.usersSize(this.props.state.usersSize+1)\n        //добавляем юзера в массив основной\n        this.props.addEmploy(employ)\n        //добавляем юзера на страницу\n        this.props.addUser(employ)\n        \n        //обнуляем поля ввода\n        $('#FirstNameT').val('')\n        $('#LastNameT').val('') \n        $('#EmailT').val('')\n        $('#PhoneT').val('')\n        \n        \n    }\n    //дизейблим кнопку если не все поля заполнены\n    changeForm = () => {\n        if($('#FirstNameT').val().length>1 && $('#LastNameT').val().length>1 &&$('#EmailT').val().length>1 && $('#PhoneT').val().length>1){\n            this.setState({btn: false})\n        }else(\n            this.setState({btn: true})\n        )\n    }\n    //ищем пользователей по имени или фамилии или номеру телефона или емаил\n    find=()=>{\n        let finded = this.props.state.state.filter((find)=> find.firstName.match($('#find').val())||find.lastName.match($('#find').val())||find.phone.match($('#find').val())||find.email.match($('#find').val()) )\n        \n        this.props.findUser(finded)\n    }\n\n    render() {\n       \n       //показываем колличесво страниц(пагинация)\n        let pageCount = Math.ceil(this.props.state.usersSize / this.props.state.pageSize)\n\n        let pages = []\n        for (let i = 1; i <= pageCount; i++) {\n            pages.push(i)\n        }\n       \n        \n\n        return (\n            <div >\n                <div className='header'>\n                    Employees\n                </div>\n                {<div className='button1'>\n                    <button onClick={this.add}>Добавить</button>\n                </div>}\n                {/* поле для ввода пользователей */}\n                <div id='showTable'>\n                    <div className='addEmploy'>\n                        <div className='addText'>\n                            \n                            <div>First Name:</div>\n                            <div>Last Name:</div>\n                            <div>Email:</div>\n                            <div>Phone:</div>\n                        </div>\n                        <div className='addInput' onChange={this.changeForm}>\n                            \n                            <div><input id ='FirstNameT' type=\"text\" minLength='2' /></div>\n                            <div><input id ='LastNameT' type=\"text\" minLength='2' /></div>\n                            <div><input id ='EmailT' type=\"text\" minLength='2' /></div>\n                            <div><input id ='PhoneT' type=\"text\" minLength='2' /></div>\n                        </div>\n\n                    </div>\n                    <div className='button'>\n                        <button disabled={this.state.btn} onClick={this.addInTable}>Добавить в таблицу</button>\n                    </div>\n                </div>\n                {/* поле для поиска пользователей */}\n                <div className='find'>\n                    <input id='find' placeholder='введите имя или телефон или email'></input>\n                    <br/>\n                    <button onClick={this.find}>Найти</button>\n                </div>\n                {/* список пользователей */}\n                <div className='body_container'>\n                    {this.props.state.state.length === 0 && <Preloader />}\n                    {this.props.state.state.length > 0 && <div>\n                        <div className='paginator'>\n                            {pages.map((p) =>\n                                <span key={p} className={this.props.state.currentPage === p && 'page'} onClick={() => { this.setCurrentPage(p) }}>{p}</span>)}\n\n                        </div>\n                        {this.props.state.users.length > 0 &&\n                            <div>\n                                <table className='table'>\n                                    <tr>\n                                        <th>id <span onClick={this.changeId}>{this.state.id ? '▼' : '▲'}</span> </th>\n                                        <th>FirstName<span onClick={this.changeFN}>{this.state.FN ? '▼' : '▲'}</span></th>\n                                        <th>lastName<span onClick={this.changeLN}>{this.state.LN ? '▼' : '▲'}</span></th>\n                                        <th>Email<span onClick={this.changeEm}>{this.state.Em ? '▼' : '▲'}</span></th>\n                                        <th>phone<span onClick={this.changePh}>{this.state.Ph ? '▼' : '▲'}</span></th>\n                                    </tr>\n                                    {this.props.state.users.map((item) =>\n\n                                        <tr ket={item.id} onClick={() => this.showEmploy(item)}>\n                                            <td>{item.id}</td>\n                                            <td>{item.firstName}</td>\n                                            <td>{item.lastName}</td>\n                                            <td>{item.email}</td>\n                                            <td>{item.phone}</td>\n                                        </tr>\n\n\n                                    )}\n\n                                </table>\n\n\n                            </div>\n                        }\n                    </div>}\n                </div>\n                {/* показываю пользователя под таблицей по которому нажали в таблице */}\n                {this.props.state.showEmploy &&\n                    <div className='body_container showEmploy' >\n                        {this.props.state.showEmploy.map((item) =>\n                        \n                        <div >\n                            \n                            <br/>\n                        Выбран пользователь <b>{item.firstName}</b>\n                        <br/>\n                        Описание:\n                        <br/> \n                        \n                        <textarea>\n                        {item.description}\n                        </textarea>\n                        <br/>\n                        Адрес проживания: <b>{item.address.streetAddres}</b>\n                        <br/>\n                        Город: <b>{item.address.city}</b>\n                        <br/>\n                        Провинция/штат: <b>{item.address.state}</b>\n                        <br/>\n                        Индекс: <b>{item.address.zip}</b>\n                            \n                        </div>\n                        )}\n                        \n                        \n                        \n                        \n                    </div>\n                }\n            </div>\n        )\n    }\n}\n//прокидываем стэйт в компаненту, можно сделать точечное прокидывание\nconst mapStateToProps = (state) => ({\n    state: state.reducerMain\n})\n\nexport const Main = connect(mapStateToProps, {findUser,addUser, getState, pageSize, usersSize, setCurrentPage, getUsers, sortId, sortFN, sortLN, sortEm, sortPh, showEmploy,addEmploy })(MainContainer)","import './App.css';\nimport {Main} from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import  {combineReducers, createStore } from 'redux'\nimport {reducerMain} from './reducerMain'\nimport {reducer as formReducer} from 'redux-form'\n\nconst reducers = combineReducers({\n    reducerMain,\n    form: formReducer\n})\n\nexport const Store = createStore(reducers)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { Store } from './components/redux/reducerCombainer';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}